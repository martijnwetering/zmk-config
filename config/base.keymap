#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#ifdef CONFIG_WIRELESS
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/outputs.h>
  #define _BT_SEL_KEYS_                                                        \
      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
  #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/german.dtsi"

#define HYPER LC(LS(LG(LALT)))

// MARK: Layer definitions

#define Base 0
#define Symbols 1
#define Coding 2
#define System 3
#define Numbers 4
#define Navigation 5

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#ifndef LH2
  #define THUMBS LH1 LH0 RH0 RH1         // Thumbs on 34 keys.
#else
  #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.
#endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Combos, leader key sequences, mouse emulation */

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
#include "leader.dtsi"
#include "mouse.dtsi"

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
// #define SMART_NUM &smart_num NUM 0
// ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
//              tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
// ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
//               tapping-term-ms = <200>;)

// Smart-mouse, requires tri-state module.
// ZMK_TRI_STATE(
//     smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
//     ignored-key-positions =
//         <LT1 LT2 LH0 LH1 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3 RH0 RH1>;
//     ignored-layers = <MOUSE NAV FN>;)

/* Custom behaviors */

// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
              ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

// Sticky shift + leader.
ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)

// Misc aliases. [TODO: clean up]
#define CANCEL    &kp K_CANCEL            // Cancel caps-word & auto-layers.
#define DSK_PREV  &hmr LCTRL LG(LC(LEFT)) // Previous desktop.
#define DSK_NEXT  &hmr LALT LG(LC(RIGHT)) // Next     desktop.
#define PIN_WIN   &kp LG(LC(LS(Q)))       // Pin window across desktops.
#define PIN_APP   &kp LG(LC(LS(A)))       // Pin application across desktops.
#define DSK_MGR   &kp LA(GRAVE)           // Desktop manager.
#define VOL_DOWN  &hmr RSHFT C_VOL_DN

/* Keymap */

ZMK_CONDITIONAL_LAYER(sys, FN NUM, SYS) // FN + NUM --> SYS.

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif

ZMK_BEHAVIOR(thumb_layer, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <300>;
    bindings = <&mo>, <&kp>;
)

// Glove80 specific behaviors, they don't work with Urob's ZMK fork
// ZMK_BEHAVIOR(rgb_ug_status_macro, macro,
//     bindings = <&rgb_ug RGB_STATUS>;
// )

// ZMK_BEHAVIOR(magic, hold_tap,
//     flavor = "tap-preferred";
//     tapping-term-ms = <200>;
//     bindings = <&mo>, <&rgb_ug_status_macro>;
// )

//////////////////////////////////////////////////////////////////////////
//
// Approximation of Pascal Getreuer's Select Word macro from QMK
// - https://getreuer.info/posts/keyboards/select-word/index.html
//
//////////////////////////////////////////////////////////////////////////

// SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
// after moving the cursor before it selects a word.  A larger delay
// may allow the macro to move to the next word upon each invocation.
#define SELECT_WORD_DELAY 1

ZMK_BEHAVIOR(select_none, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
)

// select a word (jumps to next word upon each successive invocation)
ZMK_BEHAVIOR(select_word, mod_morph,
    bindings = <&select_word_right>, <&select_word_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(select_word_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
)
ZMK_BEHAVIOR(select_word_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(LEFT) &kp LA(RIGHT) &kp LA(LS(LEFT))>;
)

// extend current selection by one word
ZMK_BEHAVIOR(extend_word, mod_morph,
    bindings = <&extend_word_right>, <&extend_word_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(extend_word_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(LS(RIGHT))>;
)
ZMK_BEHAVIOR(extend_word_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LA(LS(LEFT))>;
)

// select current line
ZMK_BEHAVIOR(select_line, mod_morph,
    bindings = <&select_line_right>, <&select_line_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(select_line_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LG(LEFT) &kp LS(LG(RIGHT))>;
)
ZMK_BEHAVIOR(select_line_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LG(RIGHT) &kp LS(LG(LEFT))>;
)

// extend current selection by one line
ZMK_BEHAVIOR(extend_line, mod_morph,
    bindings = <&extend_line_right>, <&extend_line_left>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(extend_line_right, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LS(DOWN) &kp LS(LG(RIGHT))>;
)
ZMK_BEHAVIOR(extend_line_left, macro,
    wait-ms = <SELECT_WORD_DELAY>;
    tap-ms = <SELECT_WORD_DELAY>;
    bindings = <&kp LS(UP) &kp LS(LG(LEFT))>;
)

// Swift string interpolation
ZMK_BEHAVIOR(swift_si, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp BSLH &kp LPAR &kp RPAR>;
)

ZMK_BEHAVIOR(swift_arrow, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp MINUS &kp GT>;
)

// MARK: Layers

ZMK_LAYER(base,
    &kp F1      &kp F2            &kp F3         &kp F4         &kp F5                                                                                                                                                    &kp F6        &kp F7        &kp F8       &kp F9        &kp F10
    DSK_MGR     &kp N1            &kp N2         &kp N3         &kp N4        &kp N5                                                                                                                             &kp N6   &kp N7        &kp N8        &kp N9       &kp N0        &kp PLUS
    CANCEL      &kp Q             &kp W          &kp F          &kp P         &kp G                                                                                                                              &kp J    &kp L         &kp U         &kp Y        &kp SEMI      &kp MINUS
    &kp ENTER   &hml LCTRL A      &hml LALT R    &hml LGUI S    &hml LSHFT T  &kp D                                                                                                                              &kp H    &hmr LSHFT N  &hmr LGUI E   &hmr LALT I  &hmr LCTRL O  &kp SQT
    MAGIC_SHIFT &kp Z             &kp X          &kp C          &kp V         &kp B   &kp ESC                   &kp K_APP                      MAGIC_SHIFT  MAGIC_SHIFT  &trans      &kp ENTER                   &kp K    &kp M         &comma_morph  &dot_morph   &kp FSLH      MAGIC_SHIFT
    &mo System  &kp LG(LA(BSLH))  &kp LA(SPACE)  &kp LEFT       &kp RIGHT             &thumb_layer Coding BSPC  &thumb_layer Navigation DEL    &trans       CANCEL       &kp TAB     &thumb_layer Symbols SPACE           &kp UP        &kp DOWN      &kp LBKT     &kp RBKT      &kp GRAVE
)

ZMK_LAYER(symbols,
    &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                             &none  &none  &none  &none  &none
    &trans        &trans        &trans      &trans      &trans     &kp PIPE                                                                           &none  &none  &none  &none  &none  &none
    &trans        &kp CARET     &kp AMPS    &kp STAR    &kp PLUS   &kp BSLH                                                                           &none  &none  &none  &none  &none  &none
    &trans        &kp GRAVE     &kp DLLR    &kp PRCNT   &kp EQUAL  &kp MINUS                                                                          &none  &none  &none  &none  &none  &none
    &trans        &kp TILDE     &kp EXCL    &kp AT      &kp HASH   &kp UNDER  &kp LG(LS(J))      &kp LG(LC(J))      &trans  &trans  &trans  &trans    &none  &none  &none  &none  &none  &none
    &none         &kp CAPS      &kp INS     &kp LT      &kp GT                &kp LG(LC(LEFT))   &kp LG(LC(RIGHT))  &trans  &trans  &trans  &trans           &none  &none  &none  &none  &none
)

ZMK_LAYER(coding,
    &none  &none  &none  &none  &none                                                                                              &kp C_MUTE     &kp C_VOL_DN  &kp C_VOL_UP  &trans  &trans
    &none  &none  &none  &none  &none  &none                                                                        &kp LG(LC(R))  &trans         &trans        &trans        &trans  &trans
    &none  &none  &none  &none  &none  &none                                                                        &kp LC(N5)     &kp LC(N6)     &kp LPAR      &kp RPAR      &trans  &trans
    &none  &none  &none  &none  &none  &none                                                                        &kp LG(LS(A))  &kp LG(LS(O))  &kp LBRC      &kp RBRC      &trans  &trans
    &none  &none  &none  &none  &none  &none  &trans  &trans  &trans  &trans  &kp LG(LA(LBKT))  &kp LG(LA(RBKT))    &kp LG(B)      &kp LG(R)      &kp LBKT      &kp RBKT      &trans  &trans
    &none  &none  &none  &none  &none         &trans  &trans  &trans  &trans  &trans            &trans                             &swift_si      &swift_arrow  &trans        &trans  &trans
)

ZMK_LAYER(system,
    &bt BT_CLR    &none            &none            &none            &none                                                                                           &none   &none   &none   &none  &bt BT_CLR_ALL
    &none         &none            &none            &none            &none            &none                                                                  &none   &none   &none   &none   &none  &none
    &none         &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                        &none   &none   &none   &none   &none  &none
    &bootloader   &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                        &none   &none   &none   &none   &none  &bootloader
    &sys_reset    &none            &none            &none            &none            &none            &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none  &sys_reset
    &none         &none            &none            &none            &none                             &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none  &to 4
)

ZMK_LAYER(numbers,
    &none   &none   &none   &none   &none                                                                          &none   &none      &none    &none  &none
    &none   &none   &none   &none   &none   &kp CARET                                                       &none  &none   &none      &none    &none  &none
    &none   &none   &kp N7  &kp N8  &kp N9  &kp PRCNT                                                       &none  &none   &none      &none    &none  &none
    &none   &kp N0  &kp N4  &kp N5  &kp N6  &kp PLUS                                                        &none  &none   &none      &none    &none  &none
    &none   &none   &kp N1  &kp N2  &kp N3  &kp STAR    &kp LT   &kp GT  &none  &trans  &trans   &trans     &none  &none   &kp COMMA  &kp DOT  &none  &none
    &none   &none   &none   &none   &none               &kp BSPC &trans  &trans &trans  CANCEL   &trans            &none   &none      &none    &none  &none
)

ZMK_LAYER(navigation,
    &none   &none   &none   &none  &none                                                                  &none         &none         &none     &none    &none
    &none   &none   &none   &none  &none  &none                                             &none         &none         &none         &none     &none    &none
    &none   &none   &none   &none  &none  &none                                             &none         &kp LS(TAB)   &swapper      &none     &none    &none
    &none   &none   &none   &none  &none  &none                                             &select_none  &extend_line  &extend_word  U_WH_U    U_WH_L   &none
    &none   &none   &none   &none  &none  &none   &none  &none  &none  &none  &none  &none  &kp LG(A)     &select_line  &select_word  U_WH_D    U_WH_R   &none
    &none   &none   &none   &none  &none          &none  &none  &none  &none  &none  &none                &kp PG_UP     &kp PG_DN     &kp HOME  &kp END  &none
)

// MARK: Layer Template

// ZMK_LAYER(empty,
//     &none   &none   &none   &none   &none                                                            &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none                                             &none  &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none                                             &none  &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none                                             &none  &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none   &none   &none  &none  &none  &none  &none  &none  &none  &none   &none  &none  &none  &none
//     &none   &none   &none   &none   &none           &none  &none  &none  &none  &none  &none         &none  &none   &none  &none  &none
// )
